@function color($color, $tone: "base") {
  @return map-get(map-get($colors, $color), $tone);
}

@mixin generate-btn-colors($bg, $text: #fff, $gradient-angle: "") {
  @if $gradient-angle != "" {
    background: linear-gradient($gradient-angle, color($bg, light), color($bg, dark));
    border: 0;
  } @else {
    background: color($bg);
    border: 1px solid color($bg);
  }
  color: $text;
  &:active,
  &.active {
    background: color($bg, dark);
    @if $gradient-angle != "" {
      border: 0;
    } @else {
      border: 1px solid color($bg, dark);
    }
  }
  &.hbw-btn-outlined {
    @if $bg == default {
      border: 1px solid color(default, dark);
      color: $text;
    } @else {
      border: 1px solid color($bg);
      color: color($bg);
    }
    background: #fff;
    &:active,
    &.active {
      background: color($bg);
      border: 1px solid color($bg);
      color: $text;
      .fa,
      .icon {
        fill: $text;
        color: $text;
        stroke: $text;
      }
    }
    .fa,
    .icon {
      @if $bg == default {
        fill: $text;
        color: $text;
        stroke: $text;
      } @else {
        fill: color($bg);
        color: color($bg);
        stroke: color($bg);
      }
    }
    .hbw-btn-loader {
      @if $bg == default {
        border-color: $text transparent transparent transparent;
      } @else {
        border-color: color($bg) transparent transparent transparent;
      }
    }
    &[disabled],
    &.disabled {
      background: #f1f1f1;
      cursor: not-allowed !important;
      @if $bg == default {
        color: color(text, light);
      } @else {
        color: color($bg, light);
      }
      &:active,
      &.active {
        background: #f1f1f1;
        color: color($bg, light);
      }
    }
  }
  &[disabled],
  &.disabled {
    background: color($bg, light);
    border: 1px solid color($bg, light);
    cursor: not-allowed !important;
    &:active,
    &.active {
      background: color($bg, light);
      border: 1px solid color($bg, light);
      color: lighten($text, 10%);
    }
  }
  .fa,
  .icon {
    color: $text;
    fill: $text;
    stroke: $text;
    height: 14px;
    width: 18px;
    vertical-align: middle !important;
  }
  .hbw-btn-loader {
    border-color: $text transparent transparent transparent;
  }
}

@mixin generate-btn-sizes($height) {
  height: $height;
  line-height: $height - 2px;
}
@mixin generate-fab-btn-sizes($height) {
  width: $height;
  height: $height;
  line-height: $height - 2px;
}

@mixin bp($break-point, $a: null, $b: null) {
  @if $b {
    @media #{$break-point}, #{$a}, #{$b} {
      @content;
    }
  } @else {
    @if $a {
      @media #{$break-point}, #{$a} {
        @content;
      }
    } @else {
      @media #{$break-point} {
        @content;
      }
    }
  }
}

@mixin rtl {
  body[dir="rtl"] {
    @content;
  }
}

/*---------------------- flexbox (with fallback)--------------------------*/
@mixin flexbox {
  display: -webkit-box;
  display: -webkit-flex;
  display: -moz-flex;
  display: -ms-flexbox;
  display: flex;
}
%flexbox {
  @include flexbox;
}

@mixin inline-flex {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -moz-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
}
%inline-flex {
  @include inline-flex;
}

@mixin flex-direction($value: row) {
  @if $value == row-reverse {
    -webkit-box-direction: reverse;
    -webkit-box-orient: horizontal;
  } @else if $value == column {
    -webkit-box-direction: normal;
    -webkit-box-orient: vertical;
  } @else if $value == column-reverse {
    -webkit-box-direction: reverse;
    -webkit-box-orient: vertical;
  } @else {
    -webkit-box-direction: normal;
    -webkit-box-orient: horizontal;
  }
  -webkit-flex-direction: $value;
  -moz-flex-direction: $value;
  -ms-flex-direction: $value;
  flex-direction: $value;
}
// Shorter version:
@mixin flex-dir($args...) {
  @include flex-direction($args...);
}

@mixin flex-wrap($value: nowrap) {
  // No Webkit Box fallback.
  -webkit-flex-wrap: $value;
  -moz-flex-wrap: $value;
  @if $value == nowrap {
    -ms-flex-wrap: none;
  } @else {
    -ms-flex-wrap: $value;
  }
  flex-wrap: $value;
}

@mixin flex-flow(
  $values: (
    row nowrap
  )
) {
  // No Webkit Box fallback.
  -webkit-flex-flow: $values;
  -moz-flex-flow: $values;
  -ms-flex-flow: $values;
  flex-flow: $values;
}

@mixin order($int: 0) {
  -webkit-box-ordinal-group: $int + 1;
  -webkit-order: $int;
  -moz-order: $int;
  -ms-flex-order: $int;
  order: $int;
}

@mixin flex-grow($int: 0) {
  -webkit-box-flex: $int;
  -webkit-flex-grow: $int;
  -moz-flex-grow: $int;
  -ms-flex-positive: $int;
  flex-grow: $int;
}

@mixin flex-shrink($int: 1) {
  -webkit-flex-shrink: $int;
  -moz-flex-shrink: $int;
  -ms-flex-negative: $int;
  flex-shrink: $int;
}

@mixin flex-basis($value: auto) {
  -webkit-flex-basis: $value;
  -moz-flex-basis: $value;
  -ms-flex-preferred-size: $value;
  flex-basis: $value;
}

@mixin flex($fg: 1, $fs: null, $fb: null) {
  $fg-boxflex: $fg;

  @if type-of($fg) == "list" {
    $fg-boxflex: nth($fg, 1);
  }

  -webkit-box-flex: $fg-boxflex;
  -webkit-flex: $fg $fs $fb;
  -moz-box-flex: $fg-boxflex;
  -moz-flex: $fg $fs $fb;
  -ms-flex: $fg $fs $fb;
  flex: $fg $fs $fb;
}

@mixin justify-content($value: flex-start) {
  @if $value == flex-start {
    -webkit-box-pack: start;
    -ms-flex-pack: start;
  } @else if $value == flex-end {
    -webkit-box-pack: end;
    -ms-flex-pack: end;
  } @else if $value == space-between {
    -webkit-box-pack: justify;
    -ms-flex-pack: justify;
  } @else if $value == space-around {
    -ms-flex-pack: distribute;
  } @else {
    -webkit-box-pack: $value;
    -ms-flex-pack: $value;
  }
  -webkit-justify-content: $value;
  -moz-justify-content: $value;
  justify-content: $value;
}
// Shorter version:
@mixin flex-just($args...) {
  @include justify-content($args...);
}

@mixin justify-items($value: normal) {
  -webkit-justify-content: $value;
  -moz-justify-content: $value;
  justify-content: $value;
}

@mixin align-items($value: stretch) {
  @if $value == flex-start {
    -webkit-box-align: start;
    -ms-flex-align: start;
  } @else if $value == flex-end {
    -webkit-box-align: end;
    -ms-flex-align: end;
  } @else {
    -webkit-box-align: $value;
    -ms-flex-align: $value;
  }
  -webkit-align-items: $value;
  -moz-align-items: $value;
  align-items: $value;
}

@mixin align-self($value: auto) {
  // No Webkit Box Fallback.
  -webkit-align-self: $value;
  -moz-align-self: $value;
  @if $value == flex-start {
    -ms-flex-item-align: start;
  } @else if $value == flex-end {
    -ms-flex-item-align: end;
  } @else {
    -ms-flex-item-align: $value;
  }
  align-self: $value;
}

@mixin align-content($value: stretch) {
  // No Webkit Box Fallback.
  -webkit-align-content: $value;
  -moz-align-content: $value;
  @if $value == flex-start {
    -ms-flex-line-pack: start;
  } @else if $value == flex-end {
    -ms-flex-line-pack: end;
  } @else {
    -ms-flex-line-pack: $value;
  }
  align-content: $value;
}

/*************************** Progress indicator ********************/
@mixin progress-container($height, $border-radius) {
  height: $height;
  background: #ececec;
  border-radius: $border-radius;
}

@mixin progress-filled($width, $height, $border-radius) {
  float: right;
  background: #36cc75;
  display: block;
  height: $height;
  width: $width;
  border-radius: $border-radius;
}

@mixin progress-container-vertical($height, $width, $background, $border-radius) {
  height: $height;
  width: $width;
  background: $background;
  border-radius: $border-radius;
}

/*********************************** Circles ***********************************************/
@mixin circle($height, $width) {
  height: $height;
  width: $width;
  border-radius: 100%;
}

@mixin small-color-circle($background-color) {
  width: 10px;
  height: 10px;
  background: $background-color;
  border-radius: 50%;
  display: inline-block;
  margin-left: 6px;
  vertical-align: -3px;
}

@mixin medium-color-circle {
  width: 100px;
  height: 100px;
  border: 1px solid red;
  border-radius: 50%;
  margin-top: 15px;
  display: inline-block;
}

@mixin linear-gradient($fromPosition, $toPosition, $fromColor, $toColor) {
  background-color: $toColor; /* Fallback Color */
  background-image: -webkit-gradient(
    linear,
    left $fromPosition,
    left $toPosition,
    from($fromColor),
    to($toColor)
  ); /* Saf4+, Chrome */
  background-image: -webkit-linear-gradient($fromPosition, $fromColor, $toColor); /* Chrome 10+, Saf5.1+, iOS 5+ */
  background-image: -moz-linear-gradient($fromPosition, $fromColor, $toColor); /* FF3.6 */
  background-image: -ms-linear-gradient($fromPosition, $fromColor, $toColor); /* IE10 */
  background-image: -o-linear-gradient($fromPosition, $fromColor, $toColor); /* Opera 11.10+ */
  background-image: linear-gradient($fromPosition, $fromColor, $toColor);
  filter: progid:DXImageTransform.Microsoft.gradient(GradientType=0, StartColorStr='#{$fromColor}', EndColorStr='#{$toColor}');
}

@mixin diagonal-gradient($topColor, $middleColor, $bottomColor, $angle) {
  background: $topColor; /* Old browsers */
  background: -moz-linear-gradient($angle, $bottomColor 0%, $middleColor 37%, $topColor 100%); /* FF3.6-15 */
  background: -webkit-linear-gradient(
    $angle,
    $bottomColor 0%,
    $middleColor 37%,
    $topColor 100%
  ); /* Chrome10-25,Safari5.1-6 */
  background: linear-gradient(
    $angle,
    $bottomColor 0%,
    $middleColor 37%,
    $topColor 100%
  ); /* W3C, IE10+, FF16+, Chrome26+, Opera12+, Safari7+ */
  filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$bottomColor', endColorstr='$topColor',GradientType=1 ); /* IE6-9 fallback on horizontal gradient */
}

// Angled div boundaries with solid background colours
@mixin angle($pseudo, $flip: false, $angle: 1.5deg) {
  // Possible values for $pseudo are: before, after, both
  @if $pseudo == "before" or $pseudo == "after" or $pseudo == "both" {
    position: relative;
    z-index: 1;
    $selector: if($pseudo == "both", "&:before,&:after", "&:#{$pseudo}");

    #{$selector} {
      background: inherit;
      content: "";
      display: block;
      height: 50%;
      left: 0;
      position: absolute;
      right: 0;
      z-index: -1;
      backface-visibility: hidden; // for Chrome Windows
    }

    @if $pseudo == "before" {
      #{$selector} {
        top: 0;

        @if $flip {
          transform: skewY($angle * -1);
          transform-origin: 0 0;
        } @else {
          transform: skewY($angle);
          transform-origin: 100% 0;
        }
      }
    }

    @if $pseudo == "after" {
      #{$selector} {
        bottom: 0;

        @if $flip {
          transform: skewY($angle);
          transform-origin: 0 100%;
        } @else {
          transform: skewY($angle * -1);
          transform-origin: 100%;
        }
      }
    }

    @if $pseudo == "both" {
      &:before {
        top: 0;

        @if $flip {
          transform: skewY($angle * -1);
          transform-origin: 0 0;
        } @else {
          transform: skewY($angle);
          transform-origin: 100% 0;
        }
      }

      &:after {
        bottom: 0;

        @if $flip {
          transform: skewY($angle);
          transform-origin: 0 0;
        } @else {
          transform: skewY($angle * -1);
          transform-origin: 100%;
        }
      }
    }
  }
}

@mixin primary-bg-gradient-and-shadow {
  background: #01c3f9;
  background: -webkit-linear-gradient(to left, #01c3f9, #40f6c8);
  background: linear-gradient(to left, #01c3f9, #40f6c8);
  text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.06);
  box-shadow: 1px 2px 6px 1px rgba(0, 0, 0, 0.1);
  &:hover {
    text-decoration: none;
    box-shadow: 1px 2px 6px 1px rgba(0, 0, 0, 0.1), 0px 3px 20px 3px rgba(0, 0, 0, 0.1);
  }
}

@mixin top-right-background-patterns {
  .bg-pattern-1 {
    position: absolute;
    right: 50px;
    top: -30px;
    width: 8px;
    height: 100px;
    background: #01c3f9;
    background: -webkit-linear-gradient(to left, #01c3f9, #40f6c8);
    background: linear-gradient(to top, #01c3f9, #40f6c8);
    border-radius: 20px;
    transform: rotate(-40deg);
    &:after {
      position: absolute;
      content: "";
      width: 4px;
      left: -70px;
      top: -55px;
      height: 80px;
      background: #3af1cd;
      border-radius: 10px;
    }
    &:before {
      position: absolute;
      content: "";
      width: 3px;
      left: -14px;
      top: 71px;
      height: 30px;
      background: #01c3f9;
      border-radius: 10px;
    }
  }
}

@mixin top-left-background-patterns {
  .bg-pattern-2 {
    position: absolute;
    left: 30px;
    top: 200px;
    width: 4px;
    height: 150px;
    background: #40f6c8;
    border-radius: 20px;
    transform: rotate(-40deg);
    &:after {
      position: absolute;
      content: "";
      width: 8px;
      left: -30px;
      bottom: 35px;
      height: 60px;
      background: rgba(50, 234, 213, 0.3);
      border-radius: 10px;
    }
    &:before {
      position: absolute;
      content: "";
      width: 5px;
      right: -90px;
      top: -55px;
      height: 60px;
      background: rgba(1, 195, 249, 0.38);
      border-radius: 10px;
    }
  }
}

@mixin bottom-right-background-patterns {
  .bg-pattern-3 {
    position: absolute;
    right: 100px;
    bottom: 125px;
    width: 8px;
    height: 100px;
    background: #01c3f9;
    border-radius: 20px;
    transform: rotate(-40deg);
    &:before {
      position: absolute;
      content: "";
      width: 3px;
      right: -25px;
      bottom: -90px;
      height: 150px;
      background: #aae9fa;
      border-radius: 10px;
    }
  }
}

@mixin bottom-left-background-patterns {
  .bg-pattern-4 {
    position: absolute;
    left: 0px;
    bottom: 0%;
    width: 75px;
    height: 175px;
    background: #dbfbf3;
    border-radius: 1px;
    &:after {
      position: absolute;
      content: "";
      width: 8px;
      left: 75px;
      bottom: 145px;
      height: 75px;
      background: #dbfbf3;
      border-radius: 10px;
      transform: rotate(-40deg);
    }
    &:before {
      position: absolute;
      content: "";
      width: 5px;
      right: 5px;
      bottom: -15px;
      height: 30px;
      background: #40f6c8;
      border-radius: 10px;
      transform: rotate(-40deg);
    }
  }
}

@mixin horizontal-fading-line($widthWithUnit, $heightWithUnit) {
  width: $widthWithUnit;
  height: $heightWithUnit;
  background: rgba(0, 0, 0, 0.4);
  background: -webkit-linear-gradient(to left, rgba(0, 0, 0, 0.1), rgba(0, 0, 0, 0.4), rgba(0, 0, 0, 0.1));
  background: linear-gradient(to left, rgba(0, 0, 0, 0.1), rgba(0, 0, 0, 0.4), rgba(0, 0, 0, 0.1));
  border-radius: 50%;
}

@mixin vertical-fading-line($widthWithUnit, $heightWithUnit) {
  display: inline-block;
  width: $widthWithUnit;
  height: $heightWithUnit;
  border-radius: 50%;
  background: rgba(0, 0, 0, 0.3);
  background: -webkit-linear-gradient(to bottom, rgba(0, 0, 0, 0.1), rgba(0, 0, 0, 0.3), rgba(0, 0, 0, 0.1));
  background: linear-gradient(to bottom, rgba(0, 0, 0, 0.1), rgba(0, 0, 0, 0.3), rgba(0, 0, 0, 0.1));
}

@mixin linear-color-transition {
  -webkit-animation: thisAnimation 1.5s infinite linear;
  animation: thisAnimation 1.5s infinite linear;

  @-webkit-keyframes thisAnimation {
    0% {
      background-color: #e1e1e1;
    }
    33% {
      background-color: #cccccc;
    }
    66% {
      background-color: #b7b7b7;
    }
    100% {
      background-color: #e1e1e1;
    }
  }

  @keyframes thisAnimation {
    0% {
      background-color: #e1e1e1;
    }
    33% {
      background-color: #cccccc;
    }
    66% {
      background-color: #b7b7b7;
    }
    100% {
      background-color: #e1e1e1;
    }
  }
}

@mixin hbw-avatar($width: 50px, $height: 50px, $radius: 50%) {
  background-color: #f1f1f1;
  background-size: cover;
  background-position: center;
  background-repeat: no-repeat;
  height: $height;
  width: $width;
  border-radius: $radius;
}

// pretty crappy workaround for a squircle right now
@mixin squircle($flat, $round) {
  border-top-left-radius: $flat $round;
  border-bottom-left-radius: $flat $round;
  border-bottom-right-radius: $flat $round;
  border-top-right-radius: $flat $round;
}
